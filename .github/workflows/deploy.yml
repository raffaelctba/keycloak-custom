name: Deploy to Heroku or AWS ECS

on:
  workflow_dispatch:
    inputs:
      provider:
        description: "Choose deployment target"
        required: true
        type: choice
        options:
          - heroku
          - aws
      environment:
        description: "Deployment environment"
        required: true
        type: choice
        options:
          - sys
          - pre
          - prd

jobs:
  deploy-heroku:
    if: ${{ github.event.inputs.provider == 'heroku' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Heroku Container Registry
        run: echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com

      - name: Build and push Docker image to Heroku
        run: |
          docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web .
          docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

      - name: Release app on Heroku
        run: heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

  deploy-aws:
    if: ${{ github.event.inputs.provider == 'aws' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Validate Git reference
        run: |
          case "${{ github.event.inputs.environment }}" in
            sys)
              [[ "$GITHUB_REF" == "refs/heads/develop" ]] || { echo "❌ SYS must deploy from 'develop'"; exit 1; }
              ;;
            pre)
              [[ "$GITHUB_REF" =~ ^refs/heads/release/ ]] || { echo "❌ PRE must deploy from 'release/*'"; exit 1; }
              ;;
            prd)
              [[ "$GITHUB_REF" =~ ^refs/tags/v[0-9] ]] || { echo "❌ PRD must deploy from version tag"; exit 1; }
              ;;
          esac

      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Render ECS task definition
        id: render-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ vars.ECS_TASK_DEFINITION }}
          container-name: ${{ vars.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE_NAME }}
          cluster: ${{ vars.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
          force-new-deployment: true
